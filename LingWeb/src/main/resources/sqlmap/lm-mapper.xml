<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

<select id="login" resultType="member.MemberVO">
select L.* , NVL2( NVL(M.COUPLE_NUM,F.COUPLE_NUM) , NVL(F.COUPLE_NUM,M.COUPLE_NUM) , 0  ) COUPLE_NUM
from Ling_member L left outer join (SELECT COUPLE_NUM , C.MID ID  FROM COUPLE C ) M ON M.ID = L.ID
                   left outer join (SELECT COUPLE_NUM , C.FID ID  FROM COUPLE C ) F ON F.ID = L.ID

where L.id=#{id} and L.pw=#{pw}
</select>	

<select id="findid" resultType="member.MemberVO">
select id from Ling_member where name = #{name} and phone =#{phone}
</select>

<!--아이디와 이메일에 해당하는 회원명 조회  -->
<select id="useridEmail" resultType="String">
select name from Ling_member where id = #{id} and email =#{email}
</select>

<!--비번 변경저장  -->
<update id="resetPassword">
update Ling_member set pw = #{pw} where id = #{id}
</update>

<!--회원가입:회원정보신규저장  -->
<insert id="join">
insert into Ling_member (id, pw, name, gender, birth, phone, email, admin)
values (#{id}, #{pw}, #{name}, #{gender}, #{birth}, #{phone},#{email},#{admin})
</insert>

<!--해당 아이디의 회원정보 조회  -->
<select id="info" resultType="member.MemberVO">
select id, pw, name, gender, email, phone, to_char(birth,'YYYY-MM-DD')birth from Ling_member where id = #{id}
</select>

<insert id="matching">
insert into couple (mid, fid) values (#{mid} , #{fid})
</insert>

<!-- 전체 회원정보 조회 -->
<select id="list" resultType="member.MemberVO">
<!-- select id, pw, name, gender, email, phone, to_char(birth,'YYYY-MM-DD')birth
from LING_MEMBER -->
select lm.id, lm.pw, lm.name, lm.gender, lm.email, lm.phone, lm.birth, c.couple_num
from ling_member lm
left join couple c on lm.id = c.mid or lm.id = c.fid
where admin='N'
<if test="order !=null">
order by ${order} ${sort}
</if>
</select>


<select id="adminlist" resultType="member.MemberVO">
select id, pw, name, gender, email, phone, to_char(birth,'YYYY-MM-DD')birth
from LING_MEMBER
where admin='Y'
</select>

<select id="couplelist" resultType="member.CoupleVO">
select couple_num, mid, fid, create_date
from couple
<if test="order !=null">
order by ${order} ${sort}
</if>
</select>

<!-- 회원정보 변경저장 -->
<update id="update">
update LING_MEMBER 
set pw = #{pw}, name = #{name}
	, gender = #{gender}, email = #{email}, phone = #{phone}, birth = #{birth}
where id = #{id}	
</update>

<!-- 회원정보 삭제 -->
<delete id="delete">
delete from LING_MEMBER where id in (${id})
</delete>




</mapper>